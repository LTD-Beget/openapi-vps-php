<?php
/**
 * ManageVpsConfiguration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Облачных серверов
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ManageVpsConfiguration Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ManageVpsConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Manage_VpsConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'cpu_count' => 'int',
        'disk_size' => 'int',
        'memory' => 'int',
        'price_day' => 'float',
        'price_month' => 'float',
        'available' => 'bool',
        'custom' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'cpu_count' => 'uint32',
        'disk_size' => 'uint32',
        'memory' => 'uint32',
        'price_day' => 'double',
        'price_month' => 'double',
        'available' => null,
        'custom' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'cpu_count' => false,
		'disk_size' => false,
		'memory' => false,
		'price_day' => false,
		'price_month' => false,
		'available' => false,
		'custom' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'cpu_count' => 'cpu_count',
        'disk_size' => 'disk_size',
        'memory' => 'memory',
        'price_day' => 'price_day',
        'price_month' => 'price_month',
        'available' => 'available',
        'custom' => 'custom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'cpu_count' => 'setCpuCount',
        'disk_size' => 'setDiskSize',
        'memory' => 'setMemory',
        'price_day' => 'setPriceDay',
        'price_month' => 'setPriceMonth',
        'available' => 'setAvailable',
        'custom' => 'setCustom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'cpu_count' => 'getCpuCount',
        'disk_size' => 'getDiskSize',
        'memory' => 'getMemory',
        'price_day' => 'getPriceDay',
        'price_month' => 'getPriceMonth',
        'available' => 'getAvailable',
        'custom' => 'getCustom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('cpu_count', $data ?? [], null);
        $this->setIfExists('disk_size', $data ?? [], null);
        $this->setIfExists('memory', $data ?? [], null);
        $this->setIfExists('price_day', $data ?? [], null);
        $this->setIfExists('price_month', $data ?? [], null);
        $this->setIfExists('available', $data ?? [], null);
        $this->setIfExists('custom', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cpu_count
     *
     * @return int|null
     */
    public function getCpuCount()
    {
        return $this->container['cpu_count'];
    }

    /**
     * Sets cpu_count
     *
     * @param int|null $cpu_count cpu_count
     *
     * @return self
     */
    public function setCpuCount($cpu_count)
    {

        if (is_null($cpu_count)) {
            throw new \InvalidArgumentException('non-nullable cpu_count cannot be null');
        }

        $this->container['cpu_count'] = $cpu_count;

        return $this;
    }

    /**
     * Gets disk_size
     *
     * @return int|null
     */
    public function getDiskSize()
    {
        return $this->container['disk_size'];
    }

    /**
     * Sets disk_size
     *
     * @param int|null $disk_size disk_size
     *
     * @return self
     */
    public function setDiskSize($disk_size)
    {

        if (is_null($disk_size)) {
            throw new \InvalidArgumentException('non-nullable disk_size cannot be null');
        }

        $this->container['disk_size'] = $disk_size;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return int|null
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param int|null $memory memory
     *
     * @return self
     */
    public function setMemory($memory)
    {

        if (is_null($memory)) {
            throw new \InvalidArgumentException('non-nullable memory cannot be null');
        }

        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets price_day
     *
     * @return float|null
     */
    public function getPriceDay()
    {
        return $this->container['price_day'];
    }

    /**
     * Sets price_day
     *
     * @param float|null $price_day price_day
     *
     * @return self
     */
    public function setPriceDay($price_day)
    {

        if (is_null($price_day)) {
            throw new \InvalidArgumentException('non-nullable price_day cannot be null');
        }

        $this->container['price_day'] = $price_day;

        return $this;
    }

    /**
     * Gets price_month
     *
     * @return float|null
     */
    public function getPriceMonth()
    {
        return $this->container['price_month'];
    }

    /**
     * Sets price_month
     *
     * @param float|null $price_month price_month
     *
     * @return self
     */
    public function setPriceMonth($price_month)
    {

        if (is_null($price_month)) {
            throw new \InvalidArgumentException('non-nullable price_month cannot be null');
        }

        $this->container['price_month'] = $price_month;

        return $this;
    }

    /**
     * Gets available
     *
     * @return bool|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param bool|null $available available
     *
     * @return self
     */
    public function setAvailable($available)
    {

        if (is_null($available)) {
            throw new \InvalidArgumentException('non-nullable available cannot be null');
        }

        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return bool|null
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param bool|null $custom custom
     *
     * @return self
     */
    public function setCustom($custom)
    {

        if (is_null($custom)) {
            throw new \InvalidArgumentException('non-nullable custom cannot be null');
        }

        $this->container['custom'] = $custom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


