<?php
/**
 * ManageCreateVpsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Облачных серверов
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ManageCreateVpsRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ManageCreateVpsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Manage_CreateVpsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_name' => 'string',
        'hostname' => 'string',
        'description' => 'string',
        'configuration_id' => 'string',
        'configuration_params' => '\OpenAPI\Client\Model\StructuresConfigurationParams',
        'software' => '\OpenAPI\Client\Model\ManageSoftwareInstallInfo',
        'snapshot_id' => 'string',
        'image_id' => 'string',
        'ssh_keys' => 'int[]',
        'password' => 'string',
        'beget_ssh_access_allowed' => 'bool',
        'private_networks' => '\OpenAPI\Client\Model\ManagePrivateNetworkInfo[]',
        'link_slug' => 'string',
        'license_id' => 'int',
        'region' => 'string',
        'configuration_group' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_name' => null,
        'hostname' => null,
        'description' => null,
        'configuration_id' => null,
        'configuration_params' => null,
        'software' => null,
        'snapshot_id' => null,
        'image_id' => null,
        'ssh_keys' => 'uint32',
        'password' => null,
        'beget_ssh_access_allowed' => null,
        'private_networks' => null,
        'link_slug' => null,
        'license_id' => 'uint32',
        'region' => null,
        'configuration_group' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'display_name' => false,
		'hostname' => false,
		'description' => false,
		'configuration_id' => false,
		'configuration_params' => false,
		'software' => false,
		'snapshot_id' => false,
		'image_id' => false,
		'ssh_keys' => false,
		'password' => false,
		'beget_ssh_access_allowed' => false,
		'private_networks' => false,
		'link_slug' => false,
		'license_id' => false,
		'region' => false,
		'configuration_group' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'display_name',
        'hostname' => 'hostname',
        'description' => 'description',
        'configuration_id' => 'configuration_id',
        'configuration_params' => 'configuration_params',
        'software' => 'software',
        'snapshot_id' => 'snapshot_id',
        'image_id' => 'image_id',
        'ssh_keys' => 'ssh_keys',
        'password' => 'password',
        'beget_ssh_access_allowed' => 'beget_ssh_access_allowed',
        'private_networks' => 'private_networks',
        'link_slug' => 'link_slug',
        'license_id' => 'license_id',
        'region' => 'region',
        'configuration_group' => 'configuration_group'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'hostname' => 'setHostname',
        'description' => 'setDescription',
        'configuration_id' => 'setConfigurationId',
        'configuration_params' => 'setConfigurationParams',
        'software' => 'setSoftware',
        'snapshot_id' => 'setSnapshotId',
        'image_id' => 'setImageId',
        'ssh_keys' => 'setSshKeys',
        'password' => 'setPassword',
        'beget_ssh_access_allowed' => 'setBegetSshAccessAllowed',
        'private_networks' => 'setPrivateNetworks',
        'link_slug' => 'setLinkSlug',
        'license_id' => 'setLicenseId',
        'region' => 'setRegion',
        'configuration_group' => 'setConfigurationGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'hostname' => 'getHostname',
        'description' => 'getDescription',
        'configuration_id' => 'getConfigurationId',
        'configuration_params' => 'getConfigurationParams',
        'software' => 'getSoftware',
        'snapshot_id' => 'getSnapshotId',
        'image_id' => 'getImageId',
        'ssh_keys' => 'getSshKeys',
        'password' => 'getPassword',
        'beget_ssh_access_allowed' => 'getBegetSshAccessAllowed',
        'private_networks' => 'getPrivateNetworks',
        'link_slug' => 'getLinkSlug',
        'license_id' => 'getLicenseId',
        'region' => 'getRegion',
        'configuration_group' => 'getConfigurationGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('configuration_id', $data ?? [], null);
        $this->setIfExists('configuration_params', $data ?? [], null);
        $this->setIfExists('software', $data ?? [], null);
        $this->setIfExists('snapshot_id', $data ?? [], null);
        $this->setIfExists('image_id', $data ?? [], null);
        $this->setIfExists('ssh_keys', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('beget_ssh_access_allowed', $data ?? [], null);
        $this->setIfExists('private_networks', $data ?? [], null);
        $this->setIfExists('link_slug', $data ?? [], null);
        $this->setIfExists('license_id', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('configuration_group', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {

        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {

        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }

        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets configuration_id
     *
     * @return string|null
     */
    public function getConfigurationId()
    {
        return $this->container['configuration_id'];
    }

    /**
     * Sets configuration_id
     *
     * @param string|null $configuration_id configuration_id
     *
     * @return self
     */
    public function setConfigurationId($configuration_id)
    {

        if (is_null($configuration_id)) {
            throw new \InvalidArgumentException('non-nullable configuration_id cannot be null');
        }

        $this->container['configuration_id'] = $configuration_id;

        return $this;
    }

    /**
     * Gets configuration_params
     *
     * @return \OpenAPI\Client\Model\StructuresConfigurationParams|null
     */
    public function getConfigurationParams()
    {
        return $this->container['configuration_params'];
    }

    /**
     * Sets configuration_params
     *
     * @param \OpenAPI\Client\Model\StructuresConfigurationParams|null $configuration_params configuration_params
     *
     * @return self
     */
    public function setConfigurationParams($configuration_params)
    {

        if (is_null($configuration_params)) {
            throw new \InvalidArgumentException('non-nullable configuration_params cannot be null');
        }

        $this->container['configuration_params'] = $configuration_params;

        return $this;
    }

    /**
     * Gets software
     *
     * @return \OpenAPI\Client\Model\ManageSoftwareInstallInfo|null
     */
    public function getSoftware()
    {
        return $this->container['software'];
    }

    /**
     * Sets software
     *
     * @param \OpenAPI\Client\Model\ManageSoftwareInstallInfo|null $software software
     *
     * @return self
     */
    public function setSoftware($software)
    {

        if (is_null($software)) {
            throw new \InvalidArgumentException('non-nullable software cannot be null');
        }

        $this->container['software'] = $software;

        return $this;
    }

    /**
     * Gets snapshot_id
     *
     * @return string|null
     */
    public function getSnapshotId()
    {
        return $this->container['snapshot_id'];
    }

    /**
     * Sets snapshot_id
     *
     * @param string|null $snapshot_id snapshot_id
     *
     * @return self
     */
    public function setSnapshotId($snapshot_id)
    {

        if (is_null($snapshot_id)) {
            throw new \InvalidArgumentException('non-nullable snapshot_id cannot be null');
        }

        $this->container['snapshot_id'] = $snapshot_id;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string|null
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string|null $image_id image_id
     *
     * @return self
     */
    public function setImageId($image_id)
    {

        if (is_null($image_id)) {
            throw new \InvalidArgumentException('non-nullable image_id cannot be null');
        }

        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets ssh_keys
     *
     * @return int[]|null
     */
    public function getSshKeys()
    {
        return $this->container['ssh_keys'];
    }

    /**
     * Sets ssh_keys
     *
     * @param int[]|null $ssh_keys ssh_keys
     *
     * @return self
     */
    public function setSshKeys($ssh_keys)
    {

        if (is_null($ssh_keys)) {
            throw new \InvalidArgumentException('non-nullable ssh_keys cannot be null');
        }

        $this->container['ssh_keys'] = $ssh_keys;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {

        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets beget_ssh_access_allowed
     *
     * @return bool|null
     */
    public function getBegetSshAccessAllowed()
    {
        return $this->container['beget_ssh_access_allowed'];
    }

    /**
     * Sets beget_ssh_access_allowed
     *
     * @param bool|null $beget_ssh_access_allowed beget_ssh_access_allowed
     *
     * @return self
     */
    public function setBegetSshAccessAllowed($beget_ssh_access_allowed)
    {

        if (is_null($beget_ssh_access_allowed)) {
            throw new \InvalidArgumentException('non-nullable beget_ssh_access_allowed cannot be null');
        }

        $this->container['beget_ssh_access_allowed'] = $beget_ssh_access_allowed;

        return $this;
    }

    /**
     * Gets private_networks
     *
     * @return \OpenAPI\Client\Model\ManagePrivateNetworkInfo[]|null
     */
    public function getPrivateNetworks()
    {
        return $this->container['private_networks'];
    }

    /**
     * Sets private_networks
     *
     * @param \OpenAPI\Client\Model\ManagePrivateNetworkInfo[]|null $private_networks private_networks
     *
     * @return self
     */
    public function setPrivateNetworks($private_networks)
    {

        if (is_null($private_networks)) {
            throw new \InvalidArgumentException('non-nullable private_networks cannot be null');
        }

        $this->container['private_networks'] = $private_networks;

        return $this;
    }

    /**
     * Gets link_slug
     *
     * @return string|null
     */
    public function getLinkSlug()
    {
        return $this->container['link_slug'];
    }

    /**
     * Sets link_slug
     *
     * @param string|null $link_slug link_slug
     *
     * @return self
     */
    public function setLinkSlug($link_slug)
    {

        if (is_null($link_slug)) {
            throw new \InvalidArgumentException('non-nullable link_slug cannot be null');
        }

        $this->container['link_slug'] = $link_slug;

        return $this;
    }

    /**
     * Gets license_id
     *
     * @return int|null
     */
    public function getLicenseId()
    {
        return $this->container['license_id'];
    }

    /**
     * Sets license_id
     *
     * @param int|null $license_id license_id
     *
     * @return self
     */
    public function setLicenseId($license_id)
    {

        if (is_null($license_id)) {
            throw new \InvalidArgumentException('non-nullable license_id cannot be null');
        }

        $this->container['license_id'] = $license_id;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {

        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets configuration_group
     *
     * @return string|null
     */
    public function getConfigurationGroup()
    {
        return $this->container['configuration_group'];
    }

    /**
     * Sets configuration_group
     *
     * @param string|null $configuration_group configuration_group
     *
     * @return self
     */
    public function setConfigurationGroup($configuration_group)
    {

        if (is_null($configuration_group)) {
            throw new \InvalidArgumentException('non-nullable configuration_group cannot be null');
        }

        $this->container['configuration_group'] = $configuration_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


